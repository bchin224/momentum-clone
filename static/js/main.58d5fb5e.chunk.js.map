{"version":3,"sources":["components/Layout.js","components/Clock.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["ShowPhoto","state","photo","axios","url","method","then","res","setState","pictureUrl","data","urls","regular","catch","console","error","this","backgroundPhoto","src","alt","id","Component","Clock","time","moment","format","currentHour","timeofday","icons","Info","props","handleInputChange","event","persist","zip","target","value","handleSubmit","preventDefault","get","city","name","icon","weather","main","temp","conditions","description","weatherDisplay","className","Form","Group","controlId","onSubmit","inline","FormControl","type","required","placeholder","onChange","Button","variant","App","Weather","Layout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58d5fb5e.chunk.js","sourcesContent":["import React, { Component } from 'react'\n// import axios for making http requests\nimport axios from 'axios'\n\n// api url + random photo url GET extension + client id\nconst apiUrl = 'https://api.unsplash.com/photos/random/?client_id=rhy5w5kA-6vOu0XFIEHga_1ceg39oh5ozZ8sIdEys04'\n\nclass ShowPhoto extends Component {\n  constructor () {\n    super()\n\n    this.state = {\n      photo: null\n    }\n  }\n\n  componentDidMount () {\n    return axios({\n      url: apiUrl,\n      method: 'GET'\n    })\n    .then(res => this.setState({ pictureUrl: res.data.urls.regular }))\n    .catch('Error loading background', console.error)\n  }\n\n  // render photo\n  render () {\n    const { pictureUrl } = this.state\n    let backgroundPhoto = <img src={pictureUrl} alt='random'/>\n\n    return (\n      <div id=\"background-photo\">\n        {backgroundPhoto}\n      </div>\n    )\n  }\n}\n\nexport default ShowPhoto\n","import React from 'react'\nimport moment from 'moment'\n\nconst Clock = () => {\n  const time = moment().format('LT')\n  const currentHour = moment().format('HH')\n  let timeofday = ''\n\n  if (currentHour < 12) {\n    timeofday = 'morning'\n  } else if (currentHour < 18 && currentHour >= 12) {\n    timeofday = 'afternoon'\n  } else {\n    timeofday = 'evening'\n  }\n\n  return (\n    <div>\n      <h1 id=\"time\">\n        {time}\n      </h1>\n      <p id=\"timeofday\">\n        Good {timeofday}!\n      </p>\n    </div>\n  )\n}\n\nexport default Clock\n","import React, { Component } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\nimport Clock from './Clock.js'\nimport axios from 'axios'\n\nconst apiUrl = 'https://api.openweathermap.org/data/2.5/weather?units=imperial&appid=9b706266b62ecb327121ca9708f8c096&zip='\n\nconst icons = {\n  clear: '☀',\n  rain: '️🌧',\n  storm: '⛈',\n  snow: '🌨',\n  mist: '🌫',\n  clouds: '☁',\n};\n\nclass Info extends Component {\n  constructor (props) {\n    super(props)\n    // initialize all values to null or empty\n    this.state = {\n      zip: '',\n      city: null,\n      icon: null,\n      temp: null,\n      conditions: null,\n    }\n  }\n\n  // take form input on button click\n  handleInputChange = (event) => {\n    event.persist()\n    // set input to the value of zip\n    this.setState({ zip: event.target.value })\n  }\n\n  handleSubmit = (event) => {\n    // prevent page refresh\n    event.preventDefault()\n    const { zip } = this.state\n    // make api call\n    axios.get(`${apiUrl}${zip}`)\n    // .then(res => console.log('This is res.data', res.data))\n    // pull all data from openweathermap api\n    .then(res => this.setState({\n      zip: '',\n      city: res.data.name,\n      icon: res.data.weather[0].main,\n      temp: res.data.main.temp,\n      conditions: res.data.weather[0].description\n    }))\n    .catch(console.error)\n  }\n\n  render() {\n    let weatherDisplay\n    // deconstruct all necessary values from state\n    const { city, temp, conditions } = this.state\n\n    // if there's no input, keep info display blank\n    if (!city) {\n      weatherDisplay = ''\n    } else {\n      // fill input display with content\n      weatherDisplay =(\n        <div>\n          <h3>{icons.clear} {temp}°F</h3>\n          <p id=\"city\">{city}</p>\n          <p id=\"weather-conditions\">{conditions}</p>\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        <div className=\"weather-info\">\n          {weatherDisplay}\n        </div>\n        <Form.Group controlId=\"zip\" id=\"weather-input\">\n          <Clock/>\n          <Form onSubmit={this.handleSubmit} inline>\n            <FormControl\n              type=\"text\"\n              className=\"mr-sm-2\"\n              required\n              name=\"zip\"\n              value={this.state.zip}\n              placeholder=\"Enter Your Zip\"\n              onChange={this.handleInputChange}\n            />\n            <Button className='search-btn' type=\"submit\" variant=\"outline-primary\">Get Weather</Button>\n          </Form>\n        </Form.Group>\n      </div>\n    )\n  }\n}\n\nexport default Info\n","import React from 'react'\nimport Layout from './components/Layout.js'\nimport Weather from './components/Weather.js'\n// import Quote from './components/Quote.js'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Weather />\n        <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}